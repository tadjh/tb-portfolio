---
import { ViewTransitions } from "astro:transitions";
import { SITE_DESCRIPTION, SITE_TITLE } from "../config/constants";
import profilePic from "../assets/images/tadjh-profile-square.jpg";

// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.

interface Props {
  title?: string;
  description?: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

let {
  title,
  description = SITE_DESCRIPTION,
  image = profilePic.src,
} = Astro.props;

title = title ? `${title} | ${SITE_TITLE}` : SITE_TITLE;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<!-- <link rel="icon" type="image/svg+xml" href="/favicon.svg" /> -->
<link rel="icon" href="/favicon.ico" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=Montserrat:wght@100..900&family=Poppins:wght@400&family=Roboto+Mono:wght@400&display=swap"
  rel="stylesheet"
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ViewTransitions />

<style is:global>
  html {
    height: 100%;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply font-display text-neutral-900 dark:text-white;
  }

  mark {
    @apply bg-neutral-300 px-1 text-[var(--tw-prose-body)] dark:bg-neutral-800;
  }

  section {
    @apply flex flex-col gap-y-4 md:gap-y-8;
  }

  article {
    @apply prose prose-neutral lg:prose-xl dark:prose-invert prose-headings:font-display prose-img:rounded-lg prose-video:rounded-lg md:prose-h1:text-center md:prose-img:-mx-[38px] md:prose-img:max-w-[728px] md:prose-video:-mx-[38px] md:prose-video:max-w-[728px] lg:prose-img:-mx-[72px] lg:prose-img:max-w-[960px] lg:prose-video:-mx-[72px] lg:prose-video:max-w-[960px] xl:prose-img:-mx-[104px] xl:prose-img:max-w-screen-lg xl:prose-video:-mx-[104px] xl:prose-video:max-w-screen-lg;
  }

  @media (prefers-reduced-motion: no-preference) {
    .animate-fadeInView {
      scale: 0.8;
      opacity: 0;
      animation: fadeInView linear forwards;
      animation-timeline: view();
      animation-range: entry;
    }

    @keyframes fadeInView {
      to {
        scale: 1;
        opacity: 1;
      }
    }
  }

  .flip-container:hover .flip-inner,
  .flip-container.active .flip-inner {
    transform: rotateY(-180deg);
  }

  @media (max-width: 767px) {
    .no-bg {
      background: transparent !important;
    }
  }
</style>
<script is:inline>
  if (
    localStorage.theme === "dark" ||
    (!("theme" in localStorage) &&
      window.matchMedia("(prefers-color-scheme: dark)").matches)
  ) {
    document.documentElement.classList.add("dark");
  } else {
    document.documentElement.classList.remove("dark");
  }
</script>
