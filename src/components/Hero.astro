---
import { Image } from "astro:assets";
import Video from "./Video.astro";
import { twMerge } from "tailwind-merge";
import type { CollectionEntry } from "astro:content";
import { isIFrame, isImage, isVideo } from "../utils";

interface Props {
  project: CollectionEntry<"projects">;
  children: any;
}

const { project } = Astro.props;

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/images/*.{jpeg,jpg,png,gif,webp}",
);

const videos = import.meta.glob<{ default: string }>(
  "/src/assets/videos/*.{mp4,}",
);
---

<div
  class="flex flex-col gap-y-3 rounded-lg md:gap-0"
  transition:name={`${project.slug}-hero`}
>
  <div class="relative z-10">
    {
      isImage(project.data.hero) ? (
        <Image
          src={images[project.data.hero]()}
          alt={`${project.data.title}`}
          title={`${project.data.title}`}
          class={twMerge(
            "aspect-video w-full rounded-b-lg rounded-t-lg border-2 border-b-0 border-neutral-300 object-cover object-bottom md:w-auto md:rounded-b-none xl:-mx-8 xl:max-w-screen-lg xl:rounded-b-lg xl:rounded-t-lg dark:border-neutral-800",
            // fadeIn && "animate-fade",
          )}
          loading="eager"
        />
      ) : isVideo(project.data.hero) ? (
        <Video
          autoplay
          muted
          loop
          media={videos[project.data.hero]()}
          class={twMerge(
            "aspect-video w-full rounded-b-lg rounded-t-lg border-2 border-b-0 border-neutral-300 object-cover object-bottom md:w-auto md:rounded-b-none xl:-mx-8 xl:max-w-screen-lg xl:rounded-b-lg xl:rounded-t-lg dark:border-neutral-800",
            // fadeIn && "animate-fade",
          )}
        />
      ) : isIFrame(project.data.hero) ? (
        <iframe
          src={project.data.hero.split(".iframe")[0]}
          class={twMerge(
            "pointer-events-none aspect-video w-full rounded-b-lg rounded-t-lg border-2 border-b-0 border-neutral-300 object-cover object-bottom md:w-full md:rounded-b-none xl:-mx-8 xl:max-w-screen-lg xl:rounded-b-lg xl:rounded-t-lg dark:border-neutral-800",
            // fadeIn && "animate-fade",
          )}
          loading="eager"
        />
      ) : null
    }
    {
      project.data.icon && (
        <div class="absolute bottom-0 left-0 box-content h-16 w-16 -translate-y-2 translate-x-2 rounded-full md:h-24 md:w-24 md:-translate-x-6 md:translate-y-6">
          <Image
            src={images[project.data.icon]()}
            alt={`${project.data.title} Icon`}
            class={twMerge(
              "rounded-full drop-shadow-2xl",
              project.data.iconClass,
            )}
            loading="eager"
          />
        </div>
      )
    }
  </div>
  <div
    class="no-bg flex flex-col gap-y-4 rounded-b-lg md:bg-neutral-300 md:p-6 md:shadow-2xl lg:p-8 dark:md:bg-neutral-800"
    style={{ background: project.data.background }}
  >
    <slot />
  </div>
</div>
