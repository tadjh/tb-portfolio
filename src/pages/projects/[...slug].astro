---
import { SITE_TITLE } from "../../config/constants";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faGithub } from "@fortawesome/free-brands-svg-icons";
import CustomLink from "../../components/CustomLink";
import {
  faArrowUpFromBracket,
  faArrowUpRightFromSquare,
} from "@fortawesome/free-solid-svg-icons";
import Layout from "../../layouts/Layout.astro";
import TagList from "../../components/TagList";
import { getCollection, type CollectionEntry } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";
import Hero from "../../components/Hero.astro";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import { twMerge } from "tailwind-merge";

export async function getStaticPaths() {
  const projects = await getCollection("projects");
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}

type Props = CollectionEntry<"projects">;

const project = Astro.props;

const { Content } = await project.render();
---

<Layout
  title={`${project.data.title} | ${SITE_TITLE}`}
  description={project.data.description}
  minimal
>
  <Breadcrumbs
    current={project.data.title}
    parent={{ slug: project.collection, title: "Projects" }}
  />
  <div class="flex flex-col gap-y-8 md:gap-y-16">
    <Hero project={project}>
      <div
        class={twMerge(
          "flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between",
          project.data.containerClass,
        )}
      >
        {
          project.data.updatedDate ? (
            <span title={`Originally published on ${project.data.pubDate}`}>
              Updated on
              <FormattedDate date={project.data.updatedDate} />
            </span>
          ) : (
            <span title={`Published on ${project.data.pubDate}`}>
              Published on
              <FormattedDate date={project.data.pubDate} />
            </span>
          )
        }
        <nav class="flex gap-x-3">
          {
            project.data.repository && (
              <CustomLink
                href={project.data.repository}
                external
                title="View the source code on Github"
                aria-label="View the source code on Github"
              >
                <FontAwesomeIcon
                  icon={faGithub}
                  className="h-6 w-6 transition-transform hover:scale-110"
                />
              </CustomLink>
            )
          }
          {
            project.data.website && (
              <CustomLink
                href={project.data.website}
                external
                title="Visit this project's webpage"
                aria-label="Visit this project's webpage"
                className="group"
              >
                <FontAwesomeIcon
                  icon={faArrowUpRightFromSquare}
                  className="h-6 w-6 transition-transform group-hover:scale-110"
                />
                Visit this project
              </CustomLink>
            )
          }
        </nav>
      </div>
      {
        project.data.categories && (
          <TagList label="Categories" tags={project.data.categories} />
        )
      }
      {project.data.tags && <TagList label="Skills" tags={project.data.tags} />}
    </Hero>
  </div>
  <div class="flex flex-col gap-y-4">
    <div class="z-10 flex h-24 w-full items-center justify-center">
      <hr
        class="w-1/5 border-black/90 transition-transform group-hover:scale-x-150 dark:border-white/90"
      />
    </div>
    <article class="mx-auto">
      <Content />
    </article>
  </div>
</Layout>
<CustomLink href="#main" className="mx-auto text-xl"
  ><FontAwesomeIcon icon={faArrowUpFromBracket} className="h-6 w-6" /> Go to Top</CustomLink
>
