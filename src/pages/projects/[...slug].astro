---
import { SITE_TITLE, SITE_DESCRIPTION } from "../../config/constants";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faGithub } from "@fortawesome/free-brands-svg-icons";
import CustomLink from "../../components/CustomLink";
import { faArrowUpRightFromSquare } from "@fortawesome/free-solid-svg-icons";
import Layout from "../../layouts/Layout.astro";
import TagList from "../../components/TagList";
import { getCollection, type CollectionEntry } from "astro:content";
import { Image } from "astro:assets";
import { twMerge } from "tailwind-merge";
import FormattedDate from "../../components/FormattedDate.astro";

export async function getStaticPaths() {
  const projects = await getCollection("projects");
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}

type Props = CollectionEntry<"projects">;

const project = Astro.props;
const { Content } = await project.render();

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/images/*.{jpeg,jpg,png,gif,webp}",
);
---

<Layout
  title={`${SITE_TITLE} - ${project.data.title}`}
  description={SITE_DESCRIPTION}
  minimal
  ><article class="flex flex-col gap-y-8 md:gap-y-16">
    <div class="relative">
      <Image
        src={images[project.data.heroImage]()}
        alt={`${project.data.title}`}
        title={`${project.data.title}`}
        class={"rounded-lg shadow-2xl xl:-mx-12 xl:max-w-screen-lg w-full md:w-auto aspect-video object-cover object-bottom"}
      />
      {
        project.data.icon && (
          <Image
            src={images[project.data.icon]()}
            alt={`${project.data.title} Icon`}
            class={twMerge(
              "absolute bottom-0 left-0 box-content h-16 w-16 -translate-y-2 translate-x-2 rounded-full drop-shadow-2xl md:h-24 md:w-24 md:-translate-x-6 md:translate-y-6",
              project.data.iconClass,
            )}
          />
        )
      }
    </div>
    <div class="flex flex-col gap-y-4">
      <nav class="flex flex-row gap-x-4">
        <FormattedDate date={project.data.publishDate} />
        {
          project.data.repository && (
            <CustomLink
              href={project.data.repository}
              external
              title="View the source code on Github"
              aria-label="View the source code on Github"
            >
              <FontAwesomeIcon icon={faGithub} className="h-6 w-6" />
            </CustomLink>
          )
        }
        {
          project.data.website && (
            <CustomLink
              href={project.data.website}
              external
              title="Visit this project's webpage"
              aria-label="Visit this project's webpage"
            >
              <FontAwesomeIcon
                icon={faArrowUpRightFromSquare}
                className="h-6 w-6"
              />
              Visit this project
            </CustomLink>
          )
        }
      </nav>
      {
        project.data.categories && (
          <TagList label="Categories" tags={project.data.categories} />
        )
      }
      {project.data.tags && <TagList label="Skills" tags={project.data.tags} />}
      <div class="z-10 flex h-24 w-full items-center justify-center">
        <hr
          class="w-1/5 border-black/90 transition-transform group-hover:scale-x-150 dark:border-white/90"
        />
      </div>
      <h1 class="mb-8 text-center">
        {project.data.title}
      </h1>
      <div class="markdown mx-auto flex max-w-2xl flex-col gap-y-4 md:gap-y-16">
        <Content />
      </div>
      <!-- TODO animated numbers in -->
      <!-- <ul class="flex flex-row flex-wrap gap-2">
        {project.data.hype.map((entry: string) => <li>{entry}</li>)}
      </ul> -->
      <!-- TODO animated each list element in -->
    </div>
  </article>
</Layout>
