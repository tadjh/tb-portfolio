---
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faGithub } from "@fortawesome/free-brands-svg-icons";
import StyledLink from "../../components/StyledLink.astro";
import { faArrowUpRightFromSquare } from "@fortawesome/free-solid-svg-icons";
import Layout from "../../layouts/Layout.astro";
import TagList from "../../components/TagList.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import FormattedDate from "../../components/FormattedDate.astro";
import Hero from "../../components/Hero.astro";
import Breadcrumbs from "../../components/Breadcrumbs.astro";
import { twMerge } from "tailwind-merge";
import GoToTop from "../../components/GoToTop.astro";

export async function getStaticPaths() {
  const projects = await getCollection("projects");
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: project,
  }));
}

type Props = CollectionEntry<"projects">;

const project = Astro.props;

const { Content } = await project.render();
---

<Layout
  title={project.data.title}
  description={project.data.description}
  minimal
>
  <Breadcrumbs
    current={project.data.title}
    parent={{ slug: project.collection, title: "Projects" }}
  />
  <Hero project={project}>
    <div
      class={twMerge(
        "flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between",
        project.data.containerClass,
      )}
    >
      {
        project.data.updatedDate ? (
          <span title={`Originally published on ${project.data.pubDate}`}>
            Updated on
            <FormattedDate date={project.data.updatedDate} />
          </span>
        ) : (
          <span title={`Published on ${project.data.pubDate}`}>
            Published on
            <FormattedDate date={project.data.pubDate} />
          </span>
        )
      }
      <nav class="flex gap-x-3">
        {
          project.data.repository && (
            <StyledLink
              href={project.data.repository}
              target="_blank"
              rel="noreferrer"
              title="View the source code on Github"
              aria-label="View the source code on Github"
            >
              <FontAwesomeIcon
                icon={faGithub}
                className="h-6 w-6 transition-transform hover:scale-110"
              />
            </StyledLink>
          )
        }
        {
          project.data.website && (
            <StyledLink
              href={project.data.website}
              target="_blank"
              rel="noreferrer"
              title="Visit this project's webpage"
              aria-label="Visit this project's webpage"
              class="group"
            >
              <FontAwesomeIcon
                icon={faArrowUpRightFromSquare}
                className="h-6 w-6 transition-transform group-hover:scale-110"
              />
              Visit this project
            </StyledLink>
          )
        }
      </nav>
    </div>
    {
      project.data.categories && (
        <TagList label="Categories" tags={project.data.categories} />
      )
    }
    {project.data.tags && <TagList label="Skills" tags={project.data.tags} />}
  </Hero>
  <div class="flex flex-col gap-y-4">
    <div class="z-10 flex h-24 w-full items-center justify-center">
      <hr
        class="w-1/5 border-black/90 transition-transform group-hover:scale-x-150 dark:border-white/90"
      />
    </div>
    <article class="mx-auto">
      <Content />
    </article>
    <GoToTop />
  </div>
</Layout>
